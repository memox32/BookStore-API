@page "/books/create"

@attribute [Authorize(Roles = "Administrator")]
@inject IBookRepository _repo
@inject IAuthorRepository _authorRepo
@inject IFileUpload _fileUpload
@inject NavigationManager _navManager

@using System.IO

<h3 class="card-title">Create New Author</h3>
<hr />
<br />

@if (!isSuccess)
{
  <ErrorMessage Message="Something went wrong with the creation attemp" />
}

<EditForm Model="Model" OnValidSubmit="HandleCreate">
  <DataAnnotationsValidator />
  <ValidationSummary />
  <div class="form-group">
    <label for="bookTitle">Book Title</label>
    <InputText @bind-Value="Model.Title" class="form-control" id="bookTitle" />
  </div>
  <div class="form-group">
    <label for="isbn">ISBN</label>
    <InputText @bind-Value="Model.ISBN" class="form-control" id="isbn" />
  </div>
  <div class="form-group">
    <label for="price">Price</label>
    <InputNumber @bind-Value="Model.Price" class="form-control" id="price" />
  </div>
  <div class="form-group">
    <label for="authors">Authors</label>
    <select @bind="Model.AuthorId" class="form-control" id="authors">
      <option value="">-- Select Author --</option>
      @if (Authors != null)
      {
        foreach (var author in Authors)
        {
          <option value="@author.Id">@author.FirstName @author.LastName</option>
        }
      }
    </select>
  </div>
  <div class="form-group">
    <label for="summary">Summary</label>
    <InputTextArea @bind-Value="Model.Summary" class="form-control" id="summary" />
  </div>
  <div class="form-group">
    <label for="bookcover">Book Cover Photo</label>
    <BlazorInputFile.InputFile OnChange="HandleFileSelection" />
    @if (isInvalidFileType)
    {
      <ErrorMessage Message="Please remove the invalid file type and select as new image, or leave this field blank" />
    }
    @if (!string.IsNullOrWhiteSpace(imageDataURL))
    {
      <img src="@imageDataURL" style="height:100px; width:100px" />
    }
  </div>
  <button class="btn btn-primary" type="submit">
    <span class="oi oi-pencil"></span>
    Create Book
  </button>
  <button @onclick="BackToList" class="btn btn-outline-secondary">
    <span class="oi oi-media-skip-backward"></span>
    Back To List
  </button>
</EditForm>

@code {
  private Book Model = new Book();
  private IList<Author> Authors;
  private IFileListEntry file;
  private bool isSuccess = true;
  private string imageDataURL;
  private bool isInvalidFileType = false;

  protected async override Task OnInitializedAsync()
  {
    Authors = await _authorRepo.Get(Endpoints.AuthorsEndpoint);
  }

  private void BackToList()
  {
    _navManager.NavigateTo("/books/");
  }

  private async Task HandleCreate()
  {
    if (!isInvalidFileType)
    {
      if (file != null)
      {
        var ext = Path.GetExtension(file.Name);
        var picId = Guid.NewGuid().ToString().Replace("-", "");
        var picName = $"{picId}{ext}";

        await _fileUpload.UploadFile(file, picName);

        Model.Image = picName;
      }

      isSuccess = await _repo.Create(Endpoints.BooksEndpoint, Model);

      if (isSuccess)
      {
        BackToList();
      }
      else
      {
        isSuccess = false;
      }
    }
  }

  private async Task HandleFileSelection(IFileListEntry[] files)
  {
    file = files.FirstOrDefault();
    if (file != null)
    {
      var name = file.Name;
      if (name.Contains("jpg") || name.Contains("png") || name.Contains("jpeg"))
      {
        var ms = new MemoryStream();
        await file.Data.CopyToAsync(ms);

        var reader = new StreamReader(file.Data);
        var imgBase64Data = Convert.ToBase64String(ms.ToArray());
        imageDataURL = string.Format("data:image/png;base64,{0}", imgBase64Data);
      }
      else
      {
        isInvalidFileType = true;
        imageDataURL = string.Empty;
      }
    }
    else
    {
      isInvalidFileType = false;
    }
  }
}
