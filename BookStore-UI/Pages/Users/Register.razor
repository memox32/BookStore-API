@page "/Register"

@using BookStore_UI.Models
@using BookStore_UI.Contracts

@inject IAuthenticationRepository _authRepo
@inject NavigationManager _navManager

<div class="card">
  <h3 class="card-title">Register Now</h3>
  @if (!response)
  {
    <div class="alert alert-danger">
      <p>Something went wrong with the registration attemp</p>
    </div>
  }
  <div class="card-body">
    <EditForm Model="Model" OnValidSubmit="HandleRegistration">
      <DataAnnotationsValidator />
      <ValidationSummary />
      <div class="form-group">
        <label for="email">Email address</label>
        <InputText class="form-control" id="email" @bind-Value="Model.EmailAddress" />
        <ValidationMessage For="@(() => Model.EmailAddress)" />
      </div>
      <div class="form-group">
        <label for="password">Password</label>
        <InputText class="form-control" type="password" id="password" @bind-Value="Model.Password" />
        <ValidationMessage For="@(() => Model.Password)" />
      </div>
      <div class="form-group">
        <label for="confirmpassword">Confirm password</label>
        <InputText class="form-control" type="password" id="confirmpassword" @bind-Value="Model.ConfirmPassword" />
        <ValidationMessage For="@(() => Model.ConfirmPassword)" />
        @*<span style="padding-left: 10px" asp-validation-for="Model.ConfirmPassword" class="Error"></span>*@
      </div>
      <button type="submit" class="btn btn-primary btn-block">Submit</button>
    </EditForm>
  </div>
</div>

@code {

  private RegistrationModel Model = new RegistrationModel();
  private bool response = true;

  private async Task HandleRegistration()
  {

    response = await _authRepo.Register(Model);

    if (response)
    {
      _navManager.NavigateTo("/login");
    }
  }
}
